global
    # Log to stdout so Docker captures structured HAProxy logs
    log stdout format raw daemon
    # Cap simultaneous connections; adjust upward once sizing is known
    maxconn 256

defaults
    # Apply sane HTTP defaults to every frontend/backend unless overridden
    log     global
    mode    http
    option  httplog
    timeout connect 5000ms
    timeout client  50000ms
    timeout server  50000ms

frontend http-in
    bind *:80
    # Look up client country code from CIDR map and surface it downstream
    http-request set-var(txn.geo.country) src,map_ip(/usr/local/etc/haproxy/geoip.map,unknown)
    http-request set-header X-GeoIP-Country %[var(txn.geo.country)]
    http-response set-header X-GeoIP-Country %[var(txn.geo.country)]

    # Simple WAF rules to block obvious malicious traffic before it reaches the cache layer
    acl blocked_methods method CONNECT TRACE TRACK DELETE OPTIONS
    acl path_traversal url_sub ../
    acl sql_injection url -m reg -i (union(\+|%20)+select|select(\+|%20).+from|sleep\(|benchmark\()
    acl xss_attempt url -m reg -i (<script|%3Cscript|javascript:)
    acl bad_user_agent hdr_sub(User-Agent) -i sqlmap nikto nmap
    acl geo_block var(txn.geo.country) -m str TEST

    http-request deny if blocked_methods
    http-request deny if path_traversal
    http-request deny if sql_injection
    http-request deny if xss_attempt
    http-request deny if bad_user_agent
    http-request deny if geo_block

    default_backend varnish-backend

backend varnish-backend
    # Single caching node today, keep roundrobin for quick horizontal growth
    balance roundrobin
    server varnish varnish:6081 check

# Stats endpoint scraped by the HAProxy Prometheus exporter
listen stats
    bind *:1936
    mode http
    # No auth in the PoC; add credentials before production use
    stats enable
    stats uri /
    stats refresh 10s
